import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java-library'
    // This plugin isn't applied as this isn't an executable app. It is still required as a dependency, see the below
    // comment on the dependencyManagement block for why.
    id 'org.springframework.boot' version '3.2.3' apply false
    id 'io.spring.dependency-management' version '1.1.4'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'maven-publish'
}

// This starter uses Spring Boot’s dependency management in isolation without applying Spring Boot’s plugin as this
// isn't an executable app. Instead, we use the Spring Boot plugin dependency to find the correct
// spring-boot-dependencies bom to import. See https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#managing-dependencies.dependency-management-plugin.using-in-isolation
dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

group = 'uk.co.fivium'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    withSourcesJar()
    withJavadocJar()
}

sourceSets {
    integrationTest {
        java {
            srcDir file('src/integrationTest/java')
        }
        resources {
            srcDir file('src/integrationTest/resources')
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://nexus.fivium.co.uk/repository/maven-releases/'
    }
    maven {
        url 'https://nexus.fivium.co.uk/repository/maven-snapshots/'
    }
}

dependencies {

    // spring starter dependencies
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.data:spring-data-envers'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring managed dependencies
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.apache.commons:commons-lang3'

    // external dependencies
    implementation 'uk.gov.service.notify:notifications-java-client:5.0.0-RELEASE'
    implementation 'net.javacrumbs.shedlock:shedlock-spring:5.10.0'
    implementation 'org.apache.commons:commons-collections4:4.4'

    // test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // integration test dependencies
    integrationTestRuntimeOnly 'org.postgresql:postgresql:42.6.0'

    // the library under test
    integrationTestImplementation 'uk.co.fivium:digital-notification-library-spring-boot-starter:integration-test'

    // spring starter dependencies
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    integrationTestImplementation 'org.springframework.data:spring-data-envers'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-validation'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'

    // spring managed dependencies
    integrationTestImplementation 'org.flywaydb:flyway-core'

    // external dependencies
    integrationTestImplementation 'org.testcontainers:postgresql:1.19.1'
    integrationTestImplementation 'net.javacrumbs.shedlock:shedlock-spring:5.10.0'
    integrationTestImplementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:5.10.0'
    integrationTestImplementation 'uk.gov.service.notify:notifications-java-client:4.1.0-RELEASE'

}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('compileIntegrationTestJava') {
    dependsOn(':compileJava')
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    group 'verification'
    // Need to explicitly override the default classesDirs and classpath for a test task
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    dependsOn(':jar')
    dependsOn(publishStarterJarIntegrationTestPublicationToMavenLocal)
}

tasks.register('integrationTestReport', TestReport) {
    destinationDirectory = file("${buildDir}/reports/integrationTests")
    // Specify test result directory rather than task names so this task runs even if the tests fail
    testResultDirs = [integrationTest.binResultsDir]

    mustRunAfter(integrationTest)
}

tasks.named("processIntegrationTestResources") {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sonarqube {
    properties {
        property 'sonar.coverage.jacoco.xmlReportPaths', '$buildDir/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.projectKey', 'Fivium_digital-notification-library'
        property 'sonar.organization', 'fivium-gh'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.token', System.getenv('SONARCLOUD_TOKEN')

        if (System.getenv('DRONE_PULL_REQUEST') != null) {
            property 'sonar.pullrequest.key', System.getenv('DRONE_PULL_REQUEST')
            property 'sonar.pullrequest.base', System.getenv('DRONE_TARGET_BRANCH')
            property 'sonar.pullrequest.branch', System.getenv('DRONE_SOURCE_BRANCH')
            property 'sonar.pullrequest.provider', 'github'
            property 'sonar.pullrequest.github.repository', 'digital-notification-library'
            property 'sonar.pullrequest.github.endpoint', 'https://api.github.com/'
        } else {
            property 'sonar.branch.name', System.getenv('DRONE_BRANCH')
            if (System.getenv('DRONE_BRANCH') != 'develop') {
                property 'sonar.branch.target', 'develop'
            }
        }
    }
}

checkstyle {
    config = rootProject.resources.text.fromFile('devtools/checkstyle.xml')
    toolVersion '9.3'
    ignoreFailures = false
    maxWarnings = 0
    configProperties = [ "suppressionFile" : project(':').file('devtools/checkstyle-suppression.xml')]
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

publishing {
    repositories {
        maven {
            name = 'snapshots'
            url = 'https://nexus.fivium.co.uk/repository/maven-snapshots'
            credentials {
                username = System.getenv('NEXUS_USERNAME')
                password = System.getenv('NEXUS_PASSWORD')
            }
        }

        maven {
            name = 'releases'
            url = 'https://nexus.fivium.co.uk/repository/maven-releases'
            credentials {
                username = System.getenv('NEXUS_USERNAME')
                password = System.getenv('NEXUS_PASSWORD')
            }
        }
    }

    publications {

        starterJarIntegrationTest(MavenPublication) {
            version = 'integration-test'
            from components.java
        }

        maven(MavenPublication) {

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            version = System.getenv('MAVEN_PUBLICATION_VERSION') ?: version
            from components.java
        }
    }
}
